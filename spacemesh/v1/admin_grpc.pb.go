// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: spacemesh/v1/admin.proto

package spacemeshv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AdminService_CheckpointStream_FullMethodName = "/spacemesh.v1.AdminService/CheckpointStream"
	AdminService_Recover_FullMethodName          = "/spacemesh.v1.AdminService/Recover"
	AdminService_EventsStream_FullMethodName     = "/spacemesh.v1.AdminService/EventsStream"
	AdminService_PeerInfoStream_FullMethodName   = "/spacemesh.v1.AdminService/PeerInfoStream"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	// Returns the checkpoint data.
	CheckpointStream(ctx context.Context, in *CheckpointStreamRequest, opts ...grpc.CallOption) (AdminService_CheckpointStreamClient, error)
	// Recovers from the provided checkpoint data.
	Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Events that are relevant for node operator
	EventsStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (AdminService_EventsStreamClient, error)
	// PeerInfo returns info for all connected peers.
	PeerInfoStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AdminService_PeerInfoStreamClient, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CheckpointStream(ctx context.Context, in *CheckpointStreamRequest, opts ...grpc.CallOption) (AdminService_CheckpointStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[0], AdminService_CheckpointStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceCheckpointStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_CheckpointStreamClient interface {
	Recv() (*CheckpointStreamResponse, error)
	grpc.ClientStream
}

type adminServiceCheckpointStreamClient struct {
	grpc.ClientStream
}

func (x *adminServiceCheckpointStreamClient) Recv() (*CheckpointStreamResponse, error) {
	m := new(CheckpointStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) Recover(ctx context.Context, in *RecoverRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AdminService_Recover_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) EventsStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (AdminService_EventsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[1], AdminService_EventsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServiceEventsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_EventsStreamClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type adminServiceEventsStreamClient struct {
	grpc.ClientStream
}

func (x *adminServiceEventsStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *adminServiceClient) PeerInfoStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (AdminService_PeerInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &AdminService_ServiceDesc.Streams[2], AdminService_PeerInfoStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &adminServicePeerInfoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AdminService_PeerInfoStreamClient interface {
	Recv() (*PeerInfo, error)
	grpc.ClientStream
}

type adminServicePeerInfoStreamClient struct {
	grpc.ClientStream
}

func (x *adminServicePeerInfoStreamClient) Recv() (*PeerInfo, error) {
	m := new(PeerInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations should embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	// Returns the checkpoint data.
	CheckpointStream(*CheckpointStreamRequest, AdminService_CheckpointStreamServer) error
	// Recovers from the provided checkpoint data.
	Recover(context.Context, *RecoverRequest) (*emptypb.Empty, error)
	// Events that are relevant for node operator
	EventsStream(*EventStreamRequest, AdminService_EventsStreamServer) error
	// PeerInfo returns info for all connected peers.
	PeerInfoStream(*emptypb.Empty, AdminService_PeerInfoStreamServer) error
}

// UnimplementedAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) CheckpointStream(*CheckpointStreamRequest, AdminService_CheckpointStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckpointStream not implemented")
}
func (UnimplementedAdminServiceServer) Recover(context.Context, *RecoverRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}
func (UnimplementedAdminServiceServer) EventsStream(*EventStreamRequest, AdminService_EventsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsStream not implemented")
}
func (UnimplementedAdminServiceServer) PeerInfoStream(*emptypb.Empty, AdminService_PeerInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PeerInfoStream not implemented")
}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_CheckpointStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CheckpointStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).CheckpointStream(m, &adminServiceCheckpointStreamServer{stream})
}

type AdminService_CheckpointStreamServer interface {
	Send(*CheckpointStreamResponse) error
	grpc.ServerStream
}

type adminServiceCheckpointStreamServer struct {
	grpc.ServerStream
}

func (x *adminServiceCheckpointStreamServer) Send(m *CheckpointStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminService_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_Recover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).Recover(ctx, req.(*RecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_EventsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).EventsStream(m, &adminServiceEventsStreamServer{stream})
}

type AdminService_EventsStreamServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type adminServiceEventsStreamServer struct {
	grpc.ServerStream
}

func (x *adminServiceEventsStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _AdminService_PeerInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AdminServiceServer).PeerInfoStream(m, &adminServicePeerInfoStreamServer{stream})
}

type AdminService_PeerInfoStreamServer interface {
	Send(*PeerInfo) error
	grpc.ServerStream
}

type adminServicePeerInfoStreamServer struct {
	grpc.ServerStream
}

func (x *adminServicePeerInfoStreamServer) Send(m *PeerInfo) error {
	return x.ServerStream.SendMsg(m)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spacemesh.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recover",
			Handler:    _AdminService_Recover_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CheckpointStream",
			Handler:       _AdminService_CheckpointStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EventsStream",
			Handler:       _AdminService_EventsStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PeerInfoStream",
			Handler:       _AdminService_PeerInfoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "spacemesh/v1/admin.proto",
}
